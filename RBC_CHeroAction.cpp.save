#include "RBC_CHeroAction.h"

RBC_CHeroAction::RBC_CHeroAction(const char *naem){
		printf("Creating action %s", naem);
		multipier=2;
		length=500;
		actionname=naem;
		repeat=0;
		tree="action";
}

void RBC_CHeroAction::RBC_LoadHitboxes(const char *heroname){
	printf("Starting loading hitboxes procedure for %s\n", heroname);
	std::string path= "data/heroes/";
    path+=heroname;
    path+="/";
    path+=heroname;
    path+=".xml";
    std::string buffpath;
	RBC_CXMLParser::RBC_LoadXMLFile(path.c_str());
	for(int i=0; i<LIMITER; i++){
		buffhitb.x=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "x", i));
		if(buffhitb.x==NULL){i=LIMITER+1;continue;}
		buffhitb.y=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "y", i));
		buffhitb.w=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "w", i));
		buffhitb.h=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "h", i));
		buffhitb.start=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "startframe", i));
		buffhitb.finish=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), actionname.c_str(), "finishframe", i));
		hitbox.push_back(buffhitb);
		printf("\tI've just finished loading hitbox for %s\n", actionname.c_str());
	}
	RBC_LoadMultipier(heroname);
	RBC_LoadLength(heroname);
	printf("Loading hitboxes finished\n\n");
}

void RBC_CHeroAction::RBC_LoadMultipier(const char *heroname){
	printf("Loading action multipiers for %s...\n", actionname.c_str());
	for(int i=0; i<LIMITER; i++){
		if(RBC_CXMLParser::RBC_GetXMLValue("document", tree.c_str(), i)==NULL){i=LIMITER+1;continue;}
		else{
			stringbuff=RBC_CXMLParser::RBC_GetXMLValue("document", tree.c_str(), i);
			if(stringbuff==actionname){
				intbuff=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), "multipier", i));
				if(intbuff){
					printf("\tLoading multipier for %s -> %i\n", stringbuff.c_str(), intbuff);
					multipier=intbuff;
				}
			}
		}
	}
	printf("Loading multipiers finished\n\n");
}

void RBC_CHeroAction::RBC_LoadLength(const char *heroname){
	printf("Loading action length for %s\n", actionname.c_str());

	for(int i=0; i<LIMITER; i++){
		if(RBC_CXMLParser::RBC_GetXMLValue("document", tree.c_str(), i)==NULL){i=LIMITER+1;continue;}
		else{
			stringbuff=RBC_CXMLParser::RBC_GetXMLValue("document", tree.c_str(), i);
			if(stringbuff==actionname){
				intbuff=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), "length", i));
				if(intbuff){
					printf("\tLoading length for %s -> %i\n", stringbuff.c_str(), intbuff);
					length=intbuff;
				}else{length=RBC_Size()*RBC_Multipier()-1;}
				intbuff=atoi(RBC_CXMLParser::RBC_GetXMLData("document", tree.c_str(), "repeat", i));
				if(intbuff){
					printf("\tLoading repeat mode for %s\n", stringbuff.c_str());
					repeat=1;
				}
			}
		}
	}

	printf("Loading action length done\n");
}

void RBC_CHeroAction::RBC_LoadBitmaps(const char *heroname){
	printf("Starting loading bitmaps procedure for %s\n", heroname);
	std::string path= "data/heroes/";
    path+=heroname;
    path+= "/graphics/";
    path+=actionname;
    path+="/";
    path+= heroname;
    std::string buffpath;
    for (int i=0; i<LIMITER; i++){
        buffpath=path;
        buffpath+=itoa(i, charbuff, 10);
        buffpath+=".png";
        if(RBC_CEngineFunctions::RBC_LoadIMG(buffpath.c_str())!=NULL){
			bitmap.push_back(RBC_CEngineFunctions::RBC_LoadIMG(buffpath.c_str()));
			printf("\tLoading %s done\n", buffpath.c_str());
        }else{i=LIMITER+1;continue;}
    }
    printf("Bitmaps loading procedure finished\n\n");
}

void RBC_CHeroAction::RBC_ReverseActionAnimation(void){
	SDL_Surface* buffsurf;
	printf("Habaziaba\n");
	for(int i=0; i<bitmap.size()/2; i++){
		//printf("Zamiana %i-%i\n", i, bitmap.size()-1-i);
		buffsurf=bitmap[bitmap.size()-1-i];
		bitmap[bitmap.size()-1-i]=bitmap[i];
		bitmap[i]=buffsurf;
	}
}

void RBC_CHeroAction::RBC_FlipActionAnimation(void){
	for(int i=0; i<bitmap.size(); i++){
		bitmap[i]=RBC_CEngineFunctions::RBC_FlipSurface(bitmap[i]);
	}
	for(int i=0; i<hitbox.size(); i++){
		printf("From %i to %i\n", )
		hitbox[i].x=bitmap[hitbox[i].start]->w-(hitbox[i].x+hitbox[i].w);
	}
}

vector<RBC_CHitbox> RBC_CHeroAction::RBC_ReturnActualHitbox(int frame){
	vector<RBC_CHitbox> buff;
	for(int i=0; i<hitbox.size(); i++){
		if(hitbox[i].start <= frame/multipier && hitbox[i].finish >=frame/multipier){
			//printf("Startframe %i, finish %i and ==%i\n", hitbox[i].start, hitbox[i].finish, frame/multipier);
					buff.push_back(hitbox[i]);
		}
	}
	return buff;
}
